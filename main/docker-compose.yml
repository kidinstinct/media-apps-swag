version: '3.3'
services:
  #-----------------------------------------------------------------------------
  # MANAGEMENT
  #-----------------------------------------------------------------------------

  # swag - reverse proxy with letsencrypt built in
  # Docs: https://github.com/linuxserver/docker-swag
  swag:
    container_name: swag
    hostname: swag
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    networks:
      network_apps: {}
    ports:
      - 80:80
      - 443:443
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - URL=${DOMAIN_NAME}
      - SUBDOMAINS=wildcard
      - DNSPLUGIN=${DNS_PLUGIN}
      - VALIDATION=dns
      - FILE__EMAIL=/run/secrets/acme_email
      - ONLY_SUBDOMAINS=false
      - STAGING=false
      - MAXMINDDB_LICENSE_KEY=${MAXMINDDB_LICENSE_KEY}
    secrets:
      - acme_email
      - maxminddb
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/swag:/config
    image: ghcr.io/linuxserver/swag:latest

  # organizr - WebApp portal for bookmarks, prevents multiple tabs
  # mostly used for sonarr and the like
  # docs: https://hub.docker.com/r/organizr/organizr
  organizr:
    container_name: organizr
    hostname: organizr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - fpm=true
      - branch=v2-develop
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/organizr:/config
    image: ghcr.io/organizr/organizr:latest

  #-----------------------------------------------------------------------------
  # DOWNLOADS
  #-----------------------------------------------------------------------------

  # sabnzbd - usenet downloader written in python (easynews)
  # Docs: https://hotio.dev/containers/sabnzbd/
  sabnzbd:
    container_name: sabnzbd
    hostname: sabnzbd
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sabnzbd:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    image: ghcr.io/hotio/sabnzbd:latest

  # nzbget - usenet downloader written in C++ (easynews)
  # Docs: https://hotio.dev/containers/nzbget/
  nzbget:
    container_name: nzbget
    hostname: nzbget
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/nzbget:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    image: ghcr.io/hotio/nzbget:latest

  # qbittorrent - torrent download client with VPN built in
  # Docs: https://hotio.dev/containers/qflood/
  # Read the documentaton on proper setup of either wireguard or openvpn
  # This template is setup for wireguard
  qbittorrent:
    container_name: qbittorrent
    hostname: qbittorrent
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - VPN_ENABLED=true
      - VPN_LAN_NETWORK=172.20.0.0/20
      - VPN_CONF=wg0
      - PRIVOXY_ENABLED=false
      - FLOOD_AUTH=false
      - FLOOD_OPTION_BASEURI=/qflood
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/qbittorrent:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    image: ghcr.io/hotio/qflood

  # nzbhydra2 - usenet and torsnab indexer proxy
  # Docs: https://hotio.dev/containers/nzbhydra2/
  nzbhydra2:
    container_name: nzbhydra2
    hostname: nzbhydra2
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/nzbhydra2:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    image: ghcr.io/hotio/nzbhydra2:testing

  # prowlarr - usenet and torsnab indexer proxy
  # Docs: hhttps://hotio.dev/containers/prowlarr/
  prowlarr:
    container_name: prowlarr
    hostname: prowlarr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/prowlarr:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    image: ghcr.io/hotio/prowlarr:nightly

  # trackarr - Tracker announcements to Sonarr/Radarr/Lidarr.
  # Docs: https://hotio.dev/containers/trackarr/
  trackarr:
    container_name: trackarr
    hostname: trackarr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/trackarr:/config
    image: ghcr.io/hotio/trackarr:nightly

  # requestrr a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat!
  # Docs: https://hotio.dev/containers/requestrr/
  requestrr:
    container_name: requestrr
    hostname: requestrr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/requestrr:/config
    image: ghcr.io/hotio/requestrr:latest

  # requestrr a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat!
  # Docs: https://hotio.dev/containers/requestrr/
  requestrr-4k:
    container_name: requestrr-4k
    hostname: requestrr-4k
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/requestrr-4k:/config
    image: ghcr.io/hotio/requestrr:latest

  # overseerr a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat!
  # Docs: https://hotio.dev/containers/overseerr/
  overseerr:
    container_name: overseerr
    hostname: overseerr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/overseerr:/config
    image: ghcr.io/hotio/overseerr:nightly

  # unpackerr - This application runs as a daemon on your download host. It checks for completed
  # downloads and extracts them so Radarr and/or Sonarr and/or Lidarr may import them.
  # Docs: https://hotio.dev/containers/requestrr/
  unpackerr:
    container_name: unpackerr
    hostname: unpackerr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/unpackerr:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
    image: ghcr.io/hotio/unpackerr:nightly

  #-----------------------------------------------------------------------------
  # MEDIA
  #-----------------------------------------------------------------------------

  # plex - media server
  # Docs: https://hotio.dev/containers/plex/
  plex:
    container_name: plex
    hostname: plex
    restart: unless-stopped
    networks:
      network_apps: {}
    ports:
      - 32400:32400/tcp
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=yes
      - PLEX_CLAIM=${PLEX_CLAIM}
      - PLEX_PASS=yes
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}
      #-------------------------------------------------------------------------
      # If you have an nvidia GPU
      #-------------------------------------------------------------------------
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
      #-------------------------------------------------------------------------
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/plex:/config
      - ${DOCKER_DIR}/plex-transcode:/transcode
      - ${SMB_DATA_DIR}:/data
    image: ghcr.io/hotio/plex:release

  # tautulli - plex monitor
  # Docs: https://hotio.dev/containers/tautulli/
  tautulli:
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/tautulli:/config
    image: ghcr.io/hotio/tautulli:latest

  # autoscan - replaces the default Plex behaviour for picking up file changes on the file system
  # Docs: https://github.com/Cloudbox/autoscan
  autoscan:
    container_name: autoscan
    hostname: autoscan
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
      - DEBUG=yes
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/autoscan:/config
      - ${DATA_DIR}:/data
    image: ghcr.io/hotio/autoscan:nightly

  # kitana - plex plugin middleware (frontend)
  # Docs: https://github.com/pannal/Kitana
  kitana:
    container_name: kitana
    hostname: kitana
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    command: -B 0.0.0.0:31337 -p /kitana -P
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/kitana:/app/data
    image: pannal/kitana:latest

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr:
    container_name: bazarr
    hostname: bazarr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr:/config
      - ${DATA_DIR}:/data
    image: ghcr.io/hotio/bazarr:nightly

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr-4k:
    container_name: bazarr-4k
    hostname: bazarr-4k
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr-4k:/config
      - ${DATA_DIR}:/data
    image: ghcr.io/hotio/bazarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr:
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sonarr:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
    depends_on:
      - nzbhydra2
      - sabnzbd
      - qbittorrent
    image: ghcr.io/hotio/sonarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr-4k:
    container_name: sonarr-4k
    hostname: sonarr-4k
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sonarr-4k:/config
      - ${DOWNLOAD_DIR}:/data/downloads
      - ${DATA_DIR}:/data
    depends_on:
      - nzbhydra2
      - sabnzbd
      - qbittorrent
    image: ghcr.io/hotio/sonarr:nightly

  # radarr - Movies
  # Docs: https://hotio.dev/containers/radarr/
  radarr:
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/radarr:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
    depends_on:
      - nzbhydra2
      - sabnzbd
      - qbittorrent
    image: ghcr.io/hotio/radarr:nightly

  # radarr - Movies
  # Docs: https://hotio.dev/containers/radarr/
  radarr-4k:
    container_name: radarr-4k
    hostname: radarr-4k
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/radarr-4k:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
    depends_on:
      - nzbhydra2
      - sabnzbd
      - qbittorrent
    image: ghcr.io/hotio/radarr:nightly

  # lidarr - Music
  # Docs: https://hotio.dev/containers/lidarr/
  lidarr:
    container_name: lidarr
    hostname: lidarr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/lidarr/90-config:/etc/cont-init.d/90-config
      - ${DOCKER_DIR}/lidarr:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
      - ${DOWNLOAD_DIR}/ama:/downloads-amd
    depends_on:
      - nzbhydra2
      - sabnzbd
      - qbittorrent
    image: ghcr.io/hotio/lidarr:nightly

  # readarr - eBooks
  # Docs: https://hotio.dev/containers/readarr/
  readarr:
    container_name: readarr
    hostname: readarr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/readarr:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
      # this is temporary as there was a path restructuring and some errors came up
      # using a docker volume (below) to map an old root directory
    depends_on:
      - nzbhydra2
      - sabnzbd
      - qbittorrent
    image: ghcr.io/hotio/readarr:nightly

  # mylar3 - Comics
  # Docs: https://hotio.dev/containers/mylar3/
  mylar3:
    container_name: mylar3
    hostname: mylar3
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/mylar3:/config
      # TEMP DIR for DDL Downloads
      - ${DOCKER_DIR}/mylar3/downloads:/downloads
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
    depends_on:
      - nzbhydra2
      - sabnzbd
      - qbittorrent
    image: ghcr.io/hotio/mylar3:nightly

  # calibre - ebook management database
  # docs: https://hub.docker.com/r/linuxserver/calibre
  calibre:
    container_name: calibre
    hostname: calibre
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - PASSWORD=${GUAC_PASS}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/calibre:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
    image: ghcr.io/linuxserver/calibre:latest

  # calibre-web - web frontend for calibre
  # docs: https://hub.docker.com/r/linuxserver/calibre-web
  calibre-web:
    container_name: calibre-web
    hostname: calibre-web
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/linuxserver/calibre-web:calibre
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/calibre-web:/config
      - ${DATA_DIR}:/data
    image: ghcr.io/linuxserver/calibre-web:latest

networks:
  network_apps:
    external: true

secrets:
  acme_email:
    file: ${DOCKER_DIR}/secrets/acme_email
  calibre_user:
    file: ${DOCKER_DIR}/secrets/calibre_user
  calibre_pass:
    file: ${DOCKER_DIR}/secrets/calibre_pass
  jwt:
    file: ${DOCKER_DIR}/secrets/jwt
  session:
    file: ${DOCKER_DIR}/secrets/session
  mysql:
    file: ${DOCKER_DIR}/secrets/mysql
  mysql_root:
    file: ${DOCKER_DIR}/secrets/mysql_root
  smtp:
    file: ${DOCKER_DIR}/secrets/smtp
  duo:
    file: ${DOCKER_DIR}/secrets/duo
  plex_claim:
    file: ${DOCKER_DIR}/secrets/plex_claim
  plex_4k_claim:
    file: ${DOCKER_DIR}/secrets/plex_4k_claim
  redis:
    file: ${DOCKER_DIR}/secrets/redis
  postgress:
    file: ${DOCKER_DIR}/secrets/postgress
  ldap:
    file: ${DOCKER_DIR}/secrets/ldap
  authmariadb_root_password:
    file: ${DOCKER_DIR}/secrets/authmariadb_root_password
  maxminddb:
    file: ${DOCKER_DIR}/secrets/maxminddb
